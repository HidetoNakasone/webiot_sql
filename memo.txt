
// データベースの座学

データベースの保存形式について、、、
「カラム・レコード・フィールド」は覚えましょう！
EXCELの様に、データを二次元で管理している。

まず、どんな情報を覚える？ってのがカラムです。
例えば、中学校のクラス名簿でしたら、生徒番号、名前、ふりがな、性別、席番号など。
で、実際の情報がそのカラムにそって、たくさん貯まる訳ですが、、、
カラムに沿って入力したデータって関連性ありますよね？
さっきで言うと、生徒番号1番の人がいて、名前は「hep」で、読みかたは、「へぷ」で、「男」で、席は「a-1」みたいな。

このまとまりを、レコードといいます。
なので、データベースにデータを追加するというのは、レコードを増やす事になります。

フィールドとは、項目一つ一つなので、「1番」「hep」だとか、「へぷ」「男」「a-1」が当たります。

で、このカラム・レコード・フィールドってのを、一つのテーブルと考えます。

例だと、別のクラスなら、テーブルを別けて、別のテーブルにします。
「2-b」のテーブルだとか、「3-b」みたいな感じ。

この複数(一つでもいい)のテーブルを、まとめたのが、最終的にデータベースになります。

大丈夫かな？
なので、まずデータベースを作ります。その中にテーブルを作ります。
で、テーブルを作る時に、一緒にカラムを設定します。
終わり。これで、データを保存する場所は完成です。

この後、データを追加したとしましょう。
それら、一つの集まりをレコードとよび、細かな一つをフィールドと呼びます。

基本的に、「入力されたデータ」って言われるのは、レコードを指します。

伝わるかな？？





// 今からやること。

formで入力された内容を、データベースに保存。

データベースで保存された内容を表示させる。

入力項目増やす。投稿者の名前
→ データベースを作り直す。

(カラムが必要なので、作り直します。)

再度、表示。

画像保存させる。

表示。複数枚表示。

日付情報表示
  以前作ったメソッド使用

ログイン機能作ろう。
  ログインとは？

新規テーブル作ろう。
  userテーブル

ログインとサインアップ画面作ろう。
  処理内容を考える。まずはちょっとから。

メッセージをセッションで実現させる。
  さっきの処理を少しちゃんとさせる。

削除機能を付けてみる。
  inputの話。hiddenの話。






// SQL文メモ

create database webiot2018;

use webiot2018;

create table posts (
  id int(10) auto_increment,
  msg varchar(255),
  primary key(id)
);

insert into posts values (
  null,
  "postsのサンプルデータ"
);
